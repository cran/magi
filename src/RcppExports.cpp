// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/magi.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// solveMagi
arma::cube solveMagi(const arma::mat& yFull, const OdeSystem& odeModel, const arma::vec& tvecFull, const arma::vec& sigmaExogenous, const arma::mat& phiExogenous, const arma::mat& xInitExogenous, const arma::vec& thetaInitExogenous, const arma::mat& muExogenous, const arma::mat& dotmuExogenous, const double priorTemperatureLevel, const double priorTemperatureDeriv, const double priorTemperatureObs, std::string kernel, const int nstepsHmc, const double burninRatioHmc, const unsigned int niterHmc, const arma::vec stepSizeFactorHmc, const int nEpoch, const int bandSize, bool useFrequencyBasedPrior, bool useBand, bool useMean, bool useScalerSigma, bool useFixedSigma, bool skipMissingComponentOptimization, bool positiveSystem, bool verbose);
RcppExport SEXP _magi_solveMagi(SEXP yFullSEXP, SEXP odeModelSEXP, SEXP tvecFullSEXP, SEXP sigmaExogenousSEXP, SEXP phiExogenousSEXP, SEXP xInitExogenousSEXP, SEXP thetaInitExogenousSEXP, SEXP muExogenousSEXP, SEXP dotmuExogenousSEXP, SEXP priorTemperatureLevelSEXP, SEXP priorTemperatureDerivSEXP, SEXP priorTemperatureObsSEXP, SEXP kernelSEXP, SEXP nstepsHmcSEXP, SEXP burninRatioHmcSEXP, SEXP niterHmcSEXP, SEXP stepSizeFactorHmcSEXP, SEXP nEpochSEXP, SEXP bandSizeSEXP, SEXP useFrequencyBasedPriorSEXP, SEXP useBandSEXP, SEXP useMeanSEXP, SEXP useScalerSigmaSEXP, SEXP useFixedSigmaSEXP, SEXP skipMissingComponentOptimizationSEXP, SEXP positiveSystemSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yFull(yFullSEXP);
    Rcpp::traits::input_parameter< const OdeSystem& >::type odeModel(odeModelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tvecFull(tvecFullSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaExogenous(sigmaExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phiExogenous(phiExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xInitExogenous(xInitExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetaInitExogenous(thetaInitExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type muExogenous(muExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dotmuExogenous(dotmuExogenousSEXP);
    Rcpp::traits::input_parameter< const double >::type priorTemperatureLevel(priorTemperatureLevelSEXP);
    Rcpp::traits::input_parameter< const double >::type priorTemperatureDeriv(priorTemperatureDerivSEXP);
    Rcpp::traits::input_parameter< const double >::type priorTemperatureObs(priorTemperatureObsSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const int >::type nstepsHmc(nstepsHmcSEXP);
    Rcpp::traits::input_parameter< const double >::type burninRatioHmc(burninRatioHmcSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type niterHmc(niterHmcSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type stepSizeFactorHmc(stepSizeFactorHmcSEXP);
    Rcpp::traits::input_parameter< const int >::type nEpoch(nEpochSEXP);
    Rcpp::traits::input_parameter< const int >::type bandSize(bandSizeSEXP);
    Rcpp::traits::input_parameter< bool >::type useFrequencyBasedPrior(useFrequencyBasedPriorSEXP);
    Rcpp::traits::input_parameter< bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< bool >::type useMean(useMeanSEXP);
    Rcpp::traits::input_parameter< bool >::type useScalerSigma(useScalerSigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type useFixedSigma(useFixedSigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type skipMissingComponentOptimization(skipMissingComponentOptimizationSEXP);
    Rcpp::traits::input_parameter< bool >::type positiveSystem(positiveSystemSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(solveMagi(yFull, odeModel, tvecFull, sigmaExogenous, phiExogenous, xInitExogenous, thetaInitExogenous, muExogenous, dotmuExogenous, priorTemperatureLevel, priorTemperatureDeriv, priorTemperatureObs, kernel, nstepsHmc, burninRatioHmc, niterHmc, stepSizeFactorHmc, nEpoch, bandSize, useFrequencyBasedPrior, useBand, useMean, useScalerSigma, useFixedSigma, skipMissingComponentOptimization, positiveSystem, verbose));
    return rcpp_result_gen;
END_RCPP
}
// xthetaphisigmaSample
Rcpp::List xthetaphisigmaSample(const arma::mat& xInitial, const arma::vec& thetaInitial, const arma::mat& phiInitial, const arma::vec& sigmaInitial, const arma::mat& yobs, const arma::vec& xtimes, const arma::vec& step, const std::string modelName, const int nsteps, const bool traj);
RcppExport SEXP _magi_xthetaphisigmaSample(SEXP xInitialSEXP, SEXP thetaInitialSEXP, SEXP phiInitialSEXP, SEXP sigmaInitialSEXP, SEXP yobsSEXP, SEXP xtimesSEXP, SEXP stepSEXP, SEXP modelNameSEXP, SEXP nstepsSEXP, SEXP trajSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xInitial(xInitialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetaInitial(thetaInitialSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phiInitial(phiInitialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInitial(sigmaInitialSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xtimes(xtimesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    Rcpp::traits::input_parameter< const int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< const bool >::type traj(trajSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetaphisigmaSample(xInitial, thetaInitial, phiInitial, sigmaInitial, yobs, xtimes, step, modelName, nsteps, traj));
    return rcpp_result_gen;
END_RCPP
}
// xthetaphisigmallikRcpp
Rcpp::List xthetaphisigmallikRcpp(const arma::mat& xlatent, const arma::vec& theta, const arma::mat& phi, const arma::vec& sigma, const arma::mat& yobs, const arma::vec& xtimes, const std::string modelName);
RcppExport SEXP _magi_xthetaphisigmallikRcpp(SEXP xlatentSEXP, SEXP thetaSEXP, SEXP phiSEXP, SEXP sigmaSEXP, SEXP yobsSEXP, SEXP xtimesSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xlatent(xlatentSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xtimes(xtimesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetaphisigmallikRcpp(xlatent, theta, phi, sigma, yobs, xtimes, modelName));
    return rcpp_result_gen;
END_RCPP
}
// hmcNormal
Rcpp::List hmcNormal(arma::vec initial, arma::vec step, arma::vec lb, arma::vec ub, int nsteps, bool traj);
RcppExport SEXP _magi_hmcNormal(SEXP initialSEXP, SEXP stepSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP nstepsSEXP, SEXP trajSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< bool >::type traj(trajSEXP);
    rcpp_result_gen = Rcpp::wrap(hmcNormal(initial, step, lb, ub, nsteps, traj));
    return rcpp_result_gen;
END_RCPP
}
// xthetallik_rescaledC
Rcpp::List xthetallik_rescaledC(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const double& sigma, const arma::vec& initial);
RcppExport SEXP _magi_xthetallik_rescaledC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallik_rescaledC(yobs, covVr, covRr, sigma, initial));
    return rcpp_result_gen;
END_RCPP
}
// xthetallikBandApproxC
Rcpp::List xthetallikBandApproxC(arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, double& sigma, arma::vec& initial);
RcppExport SEXP _magi_xthetallikBandApproxC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallikBandApproxC(yobs, covVr, covRr, sigma, initial));
    return rcpp_result_gen;
END_RCPP
}
// xthetallik_withmuC
Rcpp::List xthetallik_withmuC(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const double& sigma, const arma::vec& initial);
RcppExport SEXP _magi_xthetallik_withmuC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallik_withmuC(yobs, covVr, covRr, sigma, initial));
    return rcpp_result_gen;
END_RCPP
}
// speedbenchmarkXthetallik
arma::vec speedbenchmarkXthetallik(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const double& sigmaScalar, const arma::vec& initial, const int& nrep);
RcppExport SEXP _magi_speedbenchmarkXthetallik(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaScalarSEXP, SEXP initialSEXP, SEXP nrepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaScalar(sigmaScalarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const int& >::type nrep(nrepSEXP);
    rcpp_result_gen = Rcpp::wrap(speedbenchmarkXthetallik(yobs, covVr, covRr, sigmaScalar, initial, nrep));
    return rcpp_result_gen;
END_RCPP
}
// changeGPcovFromC
int changeGPcovFromC(Rcpp::List& covVr);
RcppExport SEXP _magi_changeGPcovFromC(SEXP covVrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type covVr(covVrSEXP);
    rcpp_result_gen = Rcpp::wrap(changeGPcovFromC(covVr));
    return rcpp_result_gen;
END_RCPP
}
// cov_r2cpp_t1
void cov_r2cpp_t1(const Rcpp::List& cov_r);
RcppExport SEXP _magi_cov_r2cpp_t1(SEXP cov_rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cov_r(cov_rSEXP);
    cov_r2cpp_t1(cov_r);
    return R_NilValue;
END_RCPP
}
// cov_r2cpp_t2
void cov_r2cpp_t2(Rcpp::NumericMatrix& cov_r);
RcppExport SEXP _magi_cov_r2cpp_t2(SEXP cov_rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type cov_r(cov_rSEXP);
    cov_r2cpp_t2(cov_r);
    return R_NilValue;
END_RCPP
}
// cov_r2cpp_t3
void cov_r2cpp_t3(arma::mat& cov_r);
RcppExport SEXP _magi_cov_r2cpp_t3(SEXP cov_rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type cov_r(cov_rSEXP);
    cov_r2cpp_t3(cov_r);
    return R_NilValue;
END_RCPP
}
// phisigllikHard2DC
Rcpp::List phisigllikHard2DC(const arma::vec& phisig, const arma::mat& yobs, const arma::mat& dist, std::string kernel);
RcppExport SEXP _magi_phisigllikHard2DC(SEXP phisigSEXP, SEXP yobsSEXP, SEXP distSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phisig(phisigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(phisigllikHard2DC(phisig, yobs, dist, kernel));
    return rcpp_result_gen;
END_RCPP
}
// xthetallikC
Rcpp::List xthetallikC(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const arma::vec& sigmaInput, const arma::vec& initial, const bool useBand, const Rcpp::NumericVector& priorTemperatureInput);
RcppExport SEXP _magi_xthetallikC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaInputSEXP, SEXP initialSEXP, SEXP useBandSEXP, SEXP priorTemperatureInputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInput(sigmaInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallikC(yobs, covVr, covRr, sigmaInput, initial, useBand, priorTemperatureInput));
    return rcpp_result_gen;
END_RCPP
}
// maternCovTestOutput
gpcov maternCovTestOutput(const arma::vec& phi, const arma::mat& dist, int complexity);
RcppExport SEXP _magi_maternCovTestOutput(SEXP phiSEXP, SEXP distSEXP, SEXP complexitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< int >::type complexity(complexitySEXP);
    rcpp_result_gen = Rcpp::wrap(maternCovTestOutput(phi, dist, complexity));
    return rcpp_result_gen;
END_RCPP
}
// maternCovTestInput
arma::mat maternCovTestInput(const gpcov& cov_input);
RcppExport SEXP _magi_maternCovTestInput(SEXP cov_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const gpcov& >::type cov_input(cov_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(maternCovTestInput(cov_input));
    return rcpp_result_gen;
END_RCPP
}
// phisigllikC
Rcpp::List phisigllikC(const arma::vec& phisig, const arma::mat& yobs, const arma::mat& dist, std::string kernel);
RcppExport SEXP _magi_phisigllikC(SEXP phisigSEXP, SEXP yobsSEXP, SEXP distSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phisig(phisigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(phisigllikC(phisig, yobs, dist, kernel));
    return rcpp_result_gen;
END_RCPP
}
// phisigSample
Rcpp::List phisigSample(const arma::mat& yobs, const arma::mat& dist, const arma::vec& initial, const arma::vec& step, int nsteps, bool traj, std::string kernel);
RcppExport SEXP _magi_phisigSample(SEXP yobsSEXP, SEXP distSEXP, SEXP initialSEXP, SEXP stepSEXP, SEXP nstepsSEXP, SEXP trajSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< bool >::type traj(trajSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(phisigSample(yobs, dist, initial, step, nsteps, traj, kernel));
    return rcpp_result_gen;
END_RCPP
}
// generalMaternCovRcpp
Rcpp::List generalMaternCovRcpp(const arma::vec& phi, const arma::mat& distSigned, int complexity);
RcppExport SEXP _magi_generalMaternCovRcpp(SEXP phiSEXP, SEXP distSignedSEXP, SEXP complexitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type distSigned(distSignedSEXP);
    Rcpp::traits::input_parameter< int >::type complexity(complexitySEXP);
    rcpp_result_gen = Rcpp::wrap(generalMaternCovRcpp(phi, distSigned, complexity));
    return rcpp_result_gen;
END_RCPP
}
// xthetaSample
Rcpp::List xthetaSample(const arma::mat& yobs, const Rcpp::List& covList, const arma::vec& sigmaInput, const arma::vec& initial, const arma::vec& step, const int nsteps, const bool traj, const std::string loglikflag, const double& overallTemperature, const Rcpp::NumericVector& priorTemperatureInput, const std::string modelName);
RcppExport SEXP _magi_xthetaSample(SEXP yobsSEXP, SEXP covListSEXP, SEXP sigmaInputSEXP, SEXP initialSEXP, SEXP stepSEXP, SEXP nstepsSEXP, SEXP trajSEXP, SEXP loglikflagSEXP, SEXP overallTemperatureSEXP, SEXP priorTemperatureInputSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covList(covListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInput(sigmaInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< const bool >::type traj(trajSEXP);
    Rcpp::traits::input_parameter< const std::string >::type loglikflag(loglikflagSEXP);
    Rcpp::traits::input_parameter< const double& >::type overallTemperature(overallTemperatureSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetaSample(yobs, covList, sigmaInput, initial, step, nsteps, traj, loglikflag, overallTemperature, priorTemperatureInput, modelName));
    return rcpp_result_gen;
END_RCPP
}
// xthetallikRcpp
Rcpp::List xthetallikRcpp(const arma::mat& yobs, const Rcpp::List& covAllDimInput, const arma::vec& sigmaInput, const arma::vec& initial, const std::string modelName, const bool useBand, const Rcpp::NumericVector& priorTemperatureInput);
RcppExport SEXP _magi_xthetallikRcpp(SEXP yobsSEXP, SEXP covAllDimInputSEXP, SEXP sigmaInputSEXP, SEXP initialSEXP, SEXP modelNameSEXP, SEXP useBandSEXP, SEXP priorTemperatureInputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covAllDimInput(covAllDimInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInput(sigmaInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallikRcpp(yobs, covAllDimInput, sigmaInput, initial, modelName, useBand, priorTemperatureInput));
    return rcpp_result_gen;
END_RCPP
}
// xthetallikWithmuBandC
Rcpp::List xthetallikWithmuBandC(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const arma::vec& sigmaInput, const arma::vec& initial, const bool useBand, const Rcpp::NumericVector& priorTemperatureInput);
RcppExport SEXP _magi_xthetallikWithmuBandC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaInputSEXP, SEXP initialSEXP, SEXP useBandSEXP, SEXP priorTemperatureInputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInput(sigmaInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallikWithmuBandC(yobs, covVr, covRr, sigmaInput, initial, useBand, priorTemperatureInput));
    return rcpp_result_gen;
END_RCPP
}
// basic_hmcRcpp
Rcpp::List basic_hmcRcpp(const Rcpp::Function rlpr, const arma::vec& initial, const arma::vec& step, arma::vec lb, arma::vec ub, const int nsteps, const bool traj);
RcppExport SEXP _magi_basic_hmcRcpp(SEXP rlprSEXP, SEXP initialSEXP, SEXP stepSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP nstepsSEXP, SEXP trajSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::Function >::type rlpr(rlprSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< const int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< const bool >::type traj(trajSEXP);
    rcpp_result_gen = Rcpp::wrap(basic_hmcRcpp(rlpr, initial, step, lb, ub, nsteps, traj));
    return rcpp_result_gen;
END_RCPP
}
// chainSamplerRcpp
Rcpp::List chainSamplerRcpp(const arma::mat& yobs, const Rcpp::List& covAllDimInput, const int nstepsInput, const std::string loglikflagInput, const arma::vec& priorTemperatureInput, const unsigned int sigmaSizeInput, const OdeSystem& modelInput, const unsigned int niterInput, const double burninRatioInput, const arma::vec& xthetasigmaInit, const arma::vec& stepLowInit, bool positiveSystem, bool verbose);
RcppExport SEXP _magi_chainSamplerRcpp(SEXP yobsSEXP, SEXP covAllDimInputSEXP, SEXP nstepsInputSEXP, SEXP loglikflagInputSEXP, SEXP priorTemperatureInputSEXP, SEXP sigmaSizeInputSEXP, SEXP modelInputSEXP, SEXP niterInputSEXP, SEXP burninRatioInputSEXP, SEXP xthetasigmaInitSEXP, SEXP stepLowInitSEXP, SEXP positiveSystemSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covAllDimInput(covAllDimInputSEXP);
    Rcpp::traits::input_parameter< const int >::type nstepsInput(nstepsInputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type loglikflagInput(loglikflagInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type sigmaSizeInput(sigmaSizeInputSEXP);
    Rcpp::traits::input_parameter< const OdeSystem& >::type modelInput(modelInputSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type niterInput(niterInputSEXP);
    Rcpp::traits::input_parameter< const double >::type burninRatioInput(burninRatioInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xthetasigmaInit(xthetasigmaInitSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type stepLowInit(stepLowInitSEXP);
    Rcpp::traits::input_parameter< bool >::type positiveSystem(positiveSystemSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(chainSamplerRcpp(yobs, covAllDimInput, nstepsInput, loglikflagInput, priorTemperatureInput, sigmaSizeInput, modelInput, niterInput, burninRatioInput, xthetasigmaInit, stepLowInit, positiveSystem, verbose));
    return rcpp_result_gen;
END_RCPP
}
// optimizeThetaInitRcpp
arma::vec optimizeThetaInitRcpp(const arma::mat& yobs, const List& odeModel, const Rcpp::List& covAllDimInput, const arma::vec& sigmaAllDimensionsInput, const arma::vec& priorTemperatureInput, const arma::mat& xInitInput, const bool useBandInput);
RcppExport SEXP _magi_optimizeThetaInitRcpp(SEXP yobsSEXP, SEXP odeModelSEXP, SEXP covAllDimInputSEXP, SEXP sigmaAllDimensionsInputSEXP, SEXP priorTemperatureInputSEXP, SEXP xInitInputSEXP, SEXP useBandInputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const List& >::type odeModel(odeModelSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covAllDimInput(covAllDimInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaAllDimensionsInput(sigmaAllDimensionsInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xInitInput(xInitInputSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBandInput(useBandInputSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizeThetaInitRcpp(yobs, odeModel, covAllDimInput, sigmaAllDimensionsInput, priorTemperatureInput, xInitInput, useBandInput));
    return rcpp_result_gen;
END_RCPP
}
// xthetasigmallikRcpp
Rcpp::List xthetasigmallikRcpp(const arma::mat& xlatent, const arma::vec& theta, const arma::vec& sigma, const arma::mat& yobs, const Rcpp::List& covAllDimInput, const Rcpp::NumericVector& priorTemperatureInput, const bool useBand, const bool useMean, const std::string modelName);
RcppExport SEXP _magi_xthetasigmallikRcpp(SEXP xlatentSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP yobsSEXP, SEXP covAllDimInputSEXP, SEXP priorTemperatureInputSEXP, SEXP useBandSEXP, SEXP useMeanSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xlatent(xlatentSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covAllDimInput(covAllDimInputSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const bool >::type useMean(useMeanSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetasigmallikRcpp(xlatent, theta, sigma, yobs, covAllDimInput, priorTemperatureInput, useBand, useMean, modelName));
    return rcpp_result_gen;
END_RCPP
}
// MagiPosterior
Rcpp::List MagiPosterior(const arma::mat& y, const arma::mat& xlatent, const arma::vec& theta, const arma::vec& sigma, const Rcpp::List& covAllDimInput, const OdeSystem odeModel, const Rcpp::NumericVector& priorTemperatureInput, const bool useBand);
RcppExport SEXP _magi_MagiPosterior(SEXP ySEXP, SEXP xlatentSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP covAllDimInputSEXP, SEXP odeModelSEXP, SEXP priorTemperatureInputSEXP, SEXP useBandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xlatent(xlatentSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covAllDimInput(covAllDimInputSEXP);
    Rcpp::traits::input_parameter< const OdeSystem >::type odeModel(odeModelSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    rcpp_result_gen = Rcpp::wrap(MagiPosterior(y, xlatent, theta, sigma, covAllDimInput, odeModel, priorTemperatureInput, useBand));
    return rcpp_result_gen;
END_RCPP
}
// xthetasigmaSample
Rcpp::List xthetasigmaSample(const arma::mat& yobs, const Rcpp::List& covList, const arma::vec& sigmaInit, const arma::vec& xthetaInit, const arma::vec& step, const int nsteps, const bool traj, const std::string loglikflag, const Rcpp::NumericVector& priorTemperatureInput, const std::string modelName);
RcppExport SEXP _magi_xthetasigmaSample(SEXP yobsSEXP, SEXP covListSEXP, SEXP sigmaInitSEXP, SEXP xthetaInitSEXP, SEXP stepSEXP, SEXP nstepsSEXP, SEXP trajSEXP, SEXP loglikflagSEXP, SEXP priorTemperatureInputSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covList(covListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInit(sigmaInitSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xthetaInit(xthetaInitSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< const bool >::type traj(trajSEXP);
    Rcpp::traits::input_parameter< const std::string >::type loglikflag(loglikflagSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetasigmaSample(yobs, covList, sigmaInit, xthetaInit, step, nsteps, traj, loglikflag, priorTemperatureInput, modelName));
    return rcpp_result_gen;
END_RCPP
}
// calcFrequencyBasedPrior
arma::vec calcFrequencyBasedPrior(const arma::vec& x);
RcppExport SEXP _magi_calcFrequencyBasedPrior(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(calcFrequencyBasedPrior(x));
    return rcpp_result_gen;
END_RCPP
}
// gpsmooth
arma::vec gpsmooth(const arma::mat& yobsInput, const arma::mat& distInput, std::string kernelInput, const double sigmaExogenScalar, bool useFrequencyBasedPrior);
RcppExport SEXP _magi_gpsmooth(SEXP yobsInputSEXP, SEXP distInputSEXP, SEXP kernelInputSEXP, SEXP sigmaExogenScalarSEXP, SEXP useFrequencyBasedPriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobsInput(yobsInputSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type distInput(distInputSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernelInput(kernelInputSEXP);
    Rcpp::traits::input_parameter< const double >::type sigmaExogenScalar(sigmaExogenScalarSEXP);
    Rcpp::traits::input_parameter< bool >::type useFrequencyBasedPrior(useFrequencyBasedPriorSEXP);
    rcpp_result_gen = Rcpp::wrap(gpsmooth(yobsInput, distInput, kernelInput, sigmaExogenScalar, useFrequencyBasedPrior));
    return rcpp_result_gen;
END_RCPP
}
// calcMeanCurve
arma::cube calcMeanCurve(const arma::vec& xInput, const arma::vec& yInput, const arma::vec& xOutput, const arma::mat& phiCandidates, const arma::vec& sigmaCandidates, const std::string kerneltype, const bool useDeriv);
RcppExport SEXP _magi_calcMeanCurve(SEXP xInputSEXP, SEXP yInputSEXP, SEXP xOutputSEXP, SEXP phiCandidatesSEXP, SEXP sigmaCandidatesSEXP, SEXP kerneltypeSEXP, SEXP useDerivSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type xInput(xInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yInput(yInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xOutput(xOutputSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phiCandidates(phiCandidatesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaCandidates(sigmaCandidatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kerneltype(kerneltypeSEXP);
    Rcpp::traits::input_parameter< const bool >::type useDeriv(useDerivSEXP);
    rcpp_result_gen = Rcpp::wrap(calcMeanCurve(xInput, yInput, xOutput, phiCandidates, sigmaCandidates, kerneltype, useDeriv));
    return rcpp_result_gen;
END_RCPP
}
// optimizeThetaInit
arma::vec optimizeThetaInit(const arma::mat& yobsInput, const OdeSystem& fOdeModelInput, const std::vector<gpcov>& covAllDimensionsInput, const arma::vec& sigmaAllDimensionsInput, const arma::vec& priorTemperatureInput, const arma::mat& xInitInput, const bool useBandInput);
RcppExport SEXP _magi_optimizeThetaInit(SEXP yobsInputSEXP, SEXP fOdeModelInputSEXP, SEXP covAllDimensionsInputSEXP, SEXP sigmaAllDimensionsInputSEXP, SEXP priorTemperatureInputSEXP, SEXP xInitInputSEXP, SEXP useBandInputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobsInput(yobsInputSEXP);
    Rcpp::traits::input_parameter< const OdeSystem& >::type fOdeModelInput(fOdeModelInputSEXP);
    Rcpp::traits::input_parameter< const std::vector<gpcov>& >::type covAllDimensionsInput(covAllDimensionsInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaAllDimensionsInput(sigmaAllDimensionsInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xInitInput(xInitInputSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBandInput(useBandInputSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizeThetaInit(yobsInput, fOdeModelInput, covAllDimensionsInput, sigmaAllDimensionsInput, priorTemperatureInput, xInitInput, useBandInput));
    return rcpp_result_gen;
END_RCPP
}
// optimizePhi
arma::mat optimizePhi(const arma::mat& yobsInput, const arma::vec& tvecInput, const OdeSystem& fOdeModelInput, const arma::vec& sigmaAllDimensionsInput, const arma::vec& priorTemperatureInput, const arma::mat& xInitInput, const arma::vec& thetaInitInput, const arma::mat& phiInitInput, const arma::uvec& missingComponentDim);
RcppExport SEXP _magi_optimizePhi(SEXP yobsInputSEXP, SEXP tvecInputSEXP, SEXP fOdeModelInputSEXP, SEXP sigmaAllDimensionsInputSEXP, SEXP priorTemperatureInputSEXP, SEXP xInitInputSEXP, SEXP thetaInitInputSEXP, SEXP phiInitInputSEXP, SEXP missingComponentDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobsInput(yobsInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tvecInput(tvecInputSEXP);
    Rcpp::traits::input_parameter< const OdeSystem& >::type fOdeModelInput(fOdeModelInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaAllDimensionsInput(sigmaAllDimensionsInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xInitInput(xInitInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetaInitInput(thetaInitInputSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phiInitInput(phiInitInputSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type missingComponentDim(missingComponentDimSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizePhi(yobsInput, tvecInput, fOdeModelInput, sigmaAllDimensionsInput, priorTemperatureInput, xInitInput, thetaInitInput, phiInitInput, missingComponentDim));
    return rcpp_result_gen;
END_RCPP
}
// solveMagiRcpp
Rcpp::List solveMagiRcpp(const arma::mat& yFull, const List& odeModel, const arma::vec& tvecFull, const arma::vec& sigmaExogenous, const arma::mat& phiExogenous, const arma::mat& xInitExogenous, const arma::vec& thetaInitExogenous, const arma::mat& muExogenous, const arma::mat& dotmuExogenous, const double priorTemperatureLevel, const double priorTemperatureDeriv, const double priorTemperatureObs, const std::string kernel, const int nstepsHmc, const double burninRatioHmc, const unsigned int niterHmc, const arma::vec stepSizeFactorHmc, const int nEpoch, const int bandSize, const bool useFrequencyBasedPrior, const bool useBand, const bool useMean, const bool useScalerSigma, const bool useFixedSigma, const bool skipMissingComponentOptimization, const bool positiveSystem, const bool verbose);
RcppExport SEXP _magi_solveMagiRcpp(SEXP yFullSEXP, SEXP odeModelSEXP, SEXP tvecFullSEXP, SEXP sigmaExogenousSEXP, SEXP phiExogenousSEXP, SEXP xInitExogenousSEXP, SEXP thetaInitExogenousSEXP, SEXP muExogenousSEXP, SEXP dotmuExogenousSEXP, SEXP priorTemperatureLevelSEXP, SEXP priorTemperatureDerivSEXP, SEXP priorTemperatureObsSEXP, SEXP kernelSEXP, SEXP nstepsHmcSEXP, SEXP burninRatioHmcSEXP, SEXP niterHmcSEXP, SEXP stepSizeFactorHmcSEXP, SEXP nEpochSEXP, SEXP bandSizeSEXP, SEXP useFrequencyBasedPriorSEXP, SEXP useBandSEXP, SEXP useMeanSEXP, SEXP useScalerSigmaSEXP, SEXP useFixedSigmaSEXP, SEXP skipMissingComponentOptimizationSEXP, SEXP positiveSystemSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yFull(yFullSEXP);
    Rcpp::traits::input_parameter< const List& >::type odeModel(odeModelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tvecFull(tvecFullSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaExogenous(sigmaExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phiExogenous(phiExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xInitExogenous(xInitExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetaInitExogenous(thetaInitExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type muExogenous(muExogenousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dotmuExogenous(dotmuExogenousSEXP);
    Rcpp::traits::input_parameter< const double >::type priorTemperatureLevel(priorTemperatureLevelSEXP);
    Rcpp::traits::input_parameter< const double >::type priorTemperatureDeriv(priorTemperatureDerivSEXP);
    Rcpp::traits::input_parameter< const double >::type priorTemperatureObs(priorTemperatureObsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const int >::type nstepsHmc(nstepsHmcSEXP);
    Rcpp::traits::input_parameter< const double >::type burninRatioHmc(burninRatioHmcSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type niterHmc(niterHmcSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type stepSizeFactorHmc(stepSizeFactorHmcSEXP);
    Rcpp::traits::input_parameter< const int >::type nEpoch(nEpochSEXP);
    Rcpp::traits::input_parameter< const int >::type bandSize(bandSizeSEXP);
    Rcpp::traits::input_parameter< const bool >::type useFrequencyBasedPrior(useFrequencyBasedPriorSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const bool >::type useMean(useMeanSEXP);
    Rcpp::traits::input_parameter< const bool >::type useScalerSigma(useScalerSigmaSEXP);
    Rcpp::traits::input_parameter< const bool >::type useFixedSigma(useFixedSigmaSEXP);
    Rcpp::traits::input_parameter< const bool >::type skipMissingComponentOptimization(skipMissingComponentOptimizationSEXP);
    Rcpp::traits::input_parameter< const bool >::type positiveSystem(positiveSystemSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(solveMagiRcpp(yFull, odeModel, tvecFull, sigmaExogenous, phiExogenous, xInitExogenous, thetaInitExogenous, muExogenous, dotmuExogenous, priorTemperatureLevel, priorTemperatureDeriv, priorTemperatureObs, kernel, nstepsHmc, burninRatioHmc, niterHmc, stepSizeFactorHmc, nEpoch, bandSize, useFrequencyBasedPrior, useBand, useMean, useScalerSigma, useFixedSigma, skipMissingComponentOptimization, positiveSystem, verbose));
    return rcpp_result_gen;
END_RCPP
}
// hmcTest
int hmcTest();
RcppExport SEXP _magi_hmcTest() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(hmcTest());
    return rcpp_result_gen;
END_RCPP
}
// bandTest
double bandTest(std::string filename);
RcppExport SEXP _magi_bandTest(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(bandTest(filename));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_magi_solveMagi", (DL_FUNC) &_magi_solveMagi, 27},
    {"_magi_xthetaphisigmaSample", (DL_FUNC) &_magi_xthetaphisigmaSample, 10},
    {"_magi_xthetaphisigmallikRcpp", (DL_FUNC) &_magi_xthetaphisigmallikRcpp, 7},
    {"_magi_hmcNormal", (DL_FUNC) &_magi_hmcNormal, 6},
    {"_magi_xthetallik_rescaledC", (DL_FUNC) &_magi_xthetallik_rescaledC, 5},
    {"_magi_xthetallikBandApproxC", (DL_FUNC) &_magi_xthetallikBandApproxC, 5},
    {"_magi_xthetallik_withmuC", (DL_FUNC) &_magi_xthetallik_withmuC, 5},
    {"_magi_speedbenchmarkXthetallik", (DL_FUNC) &_magi_speedbenchmarkXthetallik, 6},
    {"_magi_changeGPcovFromC", (DL_FUNC) &_magi_changeGPcovFromC, 1},
    {"_magi_cov_r2cpp_t1", (DL_FUNC) &_magi_cov_r2cpp_t1, 1},
    {"_magi_cov_r2cpp_t2", (DL_FUNC) &_magi_cov_r2cpp_t2, 1},
    {"_magi_cov_r2cpp_t3", (DL_FUNC) &_magi_cov_r2cpp_t3, 1},
    {"_magi_phisigllikHard2DC", (DL_FUNC) &_magi_phisigllikHard2DC, 4},
    {"_magi_xthetallikC", (DL_FUNC) &_magi_xthetallikC, 7},
    {"_magi_maternCovTestOutput", (DL_FUNC) &_magi_maternCovTestOutput, 3},
    {"_magi_maternCovTestInput", (DL_FUNC) &_magi_maternCovTestInput, 1},
    {"_magi_phisigllikC", (DL_FUNC) &_magi_phisigllikC, 4},
    {"_magi_phisigSample", (DL_FUNC) &_magi_phisigSample, 7},
    {"_magi_generalMaternCovRcpp", (DL_FUNC) &_magi_generalMaternCovRcpp, 3},
    {"_magi_xthetaSample", (DL_FUNC) &_magi_xthetaSample, 11},
    {"_magi_xthetallikRcpp", (DL_FUNC) &_magi_xthetallikRcpp, 7},
    {"_magi_xthetallikWithmuBandC", (DL_FUNC) &_magi_xthetallikWithmuBandC, 7},
    {"_magi_basic_hmcRcpp", (DL_FUNC) &_magi_basic_hmcRcpp, 7},
    {"_magi_chainSamplerRcpp", (DL_FUNC) &_magi_chainSamplerRcpp, 13},
    {"_magi_optimizeThetaInitRcpp", (DL_FUNC) &_magi_optimizeThetaInitRcpp, 7},
    {"_magi_xthetasigmallikRcpp", (DL_FUNC) &_magi_xthetasigmallikRcpp, 9},
    {"_magi_MagiPosterior", (DL_FUNC) &_magi_MagiPosterior, 8},
    {"_magi_xthetasigmaSample", (DL_FUNC) &_magi_xthetasigmaSample, 10},
    {"_magi_calcFrequencyBasedPrior", (DL_FUNC) &_magi_calcFrequencyBasedPrior, 1},
    {"_magi_gpsmooth", (DL_FUNC) &_magi_gpsmooth, 5},
    {"_magi_calcMeanCurve", (DL_FUNC) &_magi_calcMeanCurve, 7},
    {"_magi_optimizeThetaInit", (DL_FUNC) &_magi_optimizeThetaInit, 7},
    {"_magi_optimizePhi", (DL_FUNC) &_magi_optimizePhi, 9},
    {"_magi_solveMagiRcpp", (DL_FUNC) &_magi_solveMagiRcpp, 27},
    {"_magi_hmcTest", (DL_FUNC) &_magi_hmcTest, 0},
    {"_magi_bandTest", (DL_FUNC) &_magi_bandTest, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_magi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
